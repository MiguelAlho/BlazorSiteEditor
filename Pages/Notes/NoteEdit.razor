@page "/Notes/Edit/{NoteFileName}"
@using MiguelAlho.BlazorSiteEditor.Models
@using MudBlazor.Extensions
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@using MiguelAlho.BlazorSiteEditor.Pages.Notes.Components
@using Microsoft.Extensions.Primitives
@using Markdig.Extensions.Mathematics
@using IdGen

<PageTitle>Edit - @CurrentNote.Title</PageTitle>

<MudPaper Class="pa-8">
    <MudTabs Border="true">
        <MudTabPanel Text="Meta">
            <MudStack>
                <MudPaper Class="pa-8">
                    <MudTextField T="string" @bind-Value="CurrentNote.Title" Label="Title" Required="true" RequiredError="Title is required!"/>
                </MudPaper>

                <MudGrid>
                    <MudItem xs="6">
                        <MudPaper Class="pa-8">
                            <h3>Page Metadata</h3>
                            <MudTextField T="string" @bind-Value="CurrentNote.Author" Label="Author" Required="true" RequiredError="Author is required!"/>
                            <MudTextField T="string" @bind-Value="CurrentNote.Url" Label="Url" Required="true" RequiredError="Title is required!"/>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="6">
                        <MudPaper Class="pa-8">
                            <h3>Video Metadata</h3>
                            <MudTextField T="string" @bind-Value="CurrentNote.Video.Source" Label="Source" Required="true" RequiredError="Source is required!"/>
                            <MudTextField T="string" @bind-Value="CurrentNote.Video.Id" Label="Id" Required="true" RequiredError="Id is required!"/>
                            <MudTextField T="string" @bind-Value="CurrentNote.Video.Link" Label="Url" Required="true" RequiredError="Url is required!"/>
                            <h4>Speaker</h4>
                            <MudTextField T="string" @bind-Value="CurrentNote.Video.Author.Name" Label="Speaker Type"/>
                            <MudTextField T="string" @bind-Value="CurrentNote.Video.Author.Twitter" Label="Speaker Twitter"/>
                            <MudTextField T="string" @bind-Value="CurrentNote.Video.Author.LinkedIn" Label="Speaker LinkedIn"/>
                            <h4>Event</h4>
                            <MudTextField T="string" @bind-Value="CurrentNote.Video.Context.Name" Label="Event Name"/>
                            <MudTextField T="string" @bind-Value="CurrentNote.Video.Context.Link" Label="Event Link"/>

                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudStack>
        </MudTabPanel>

        <MudTabPanel Text="Video Notes">
            <MudGrid>
                <MudItem xs="6">
                    <MudPaper Class="pa-8">
                        <MudStack>
                            <YoutubeVideo Link="@CurrentNote.Video.Link" />
                            <MudToolBar>
                                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Pause"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.PlayArrow"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.ArrowForward"></MudIconButton>
                                <MudSpacer></MudSpacer>
                                <MudIconButton Icon="@Icons.Material.Filled.Note" OnClick="NewNoteClicked"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Comment" OnClick="NewCommentClicked"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Screenshot" OnClick="NewSlideClicked"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.ContentPaste" OnClick="PasteClipboardImage"></MudIconButton>
                            </MudToolBar>
                        </MudStack>
                    </MudPaper>
                    <MudPaper Class="pa-8">
                        <MudStack>
                            <MudTextField T="EntryType" @bind-Value="CurrentEntry.Type" Label="Type" Required="true" RequiredError="Type is required!"/>
                            <MudStack Row="true">
                                <MudTextField T="string" @bind-Value="CurrentEntry.Time" Label="Timestamp" Class="xs-3"/>
                                <MudTextField T="string" @bind-Value="CurrentEntry.Title" Label="Title"/>
                            </MudStack>
                            <MudTextField T="string" @bind-Value="CurrentEntry.Image" Label="Image to link to"/>

                            <MudTextField T="string" @bind-Value="CurrentEntry.Content" Label="Main content" Lines="10"/>
                            <MudTextField T="string" @bind-Value="CurrentEntry.Comment" Label="Lateral comment" Lines="5"/>
                            <MudButton OnClick="AddEntry">Add</MudButton>
                            <MudButton OnClick="ClearEntry">Clear</MudButton>
                        </MudStack>
                    </MudPaper>

                </MudItem>
                <MudItem xs="6">
                    <MudStack Class="pa-8">
                        <MudToolBar>
                            <MudSpacer></MudSpacer>
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"></MudIconButton>
                        </MudToolBar>
                        @foreach (var note in CurrentNote.Notes)
                        {
                            <MudCard>
                                <MudCardHeader>
                                    <b><MudButton OnClick="@(() => SeekClicked(note.Time))">@(note.Time)</MudButton> @(note.Title)</b>
                                    <hr/>
                                </MudCardHeader>
                                <MudCardContent>
                                    @if (!String.IsNullOrWhiteSpace(note.Image))
                                    {
                                        <img src="@ImageToBase64DataSource(note)" style="width:100%"/>
                                    }
                                    @if (!String.IsNullOrWhiteSpace(note.Content))
                                    {
                                        <blockquote class="pa-4">
                                            @((MarkupString) (@Markdown.ToHtml(@note.Content) ?? ""))<br/>
                                        </blockquote>
                                    }
                                    <blockquote class="pa-4">@note.Comment</blockquote>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton>Edit</MudButton>
                                    <MudButton>Remove</MudButton>
                                </MudCardActions>
                            </MudCard>
                        }

                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="File Content">
            <div Class="pa-8">
                <h2>Yaml</h2>
                <pre>@currentFileContent</pre>
            </div>
        </MudTabPanel>

    </MudTabs>
</MudPaper>


@code
{
    private Lazy<IJSObjectReference> JsModule = new();
    private DotNetObjectReference<NoteEdit> _blazorPageReference;
    
    private string NotesDir = UserDefinitionsService.BookmarksFolderPath;

    public Note CurrentNote { get; set; } = new();
    public Entry CurrentEntry { get; set; } = new();

    
    private string CurrentNoteFilePath = string.Empty;
    private string currentFileContent = string.Empty;

    [Parameter]
    public string? NoteFileName { get; set; }


    protected override void OnInitialized()
    {
        if (String.IsNullOrWhiteSpace(NoteFileName))
            return;

        var dir = new DirectoryInfo(NotesDir);
        CurrentNoteFilePath = Path.Combine(dir.FullName, NoteFileName);

        currentFileContent = File.ReadAllText(CurrentNoteFilePath);

    //process and load yaml to data struct
        var parts = currentFileContent.Split("---", StringSplitOptions.RemoveEmptyEntries);
        var frontMatter = parts[0];

        try
        {
            var deserializer = new DeserializerBuilder()
                .WithNamingConvention(CamelCaseNamingConvention.Instance) // see height_in_inches in sample yml 
                .IgnoreUnmatchedProperties()
                .IgnoreFields()
                .Build();
            CurrentNote = deserializer.Deserialize<Note>(frontMatter);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Console.WriteLine(ex.InnerException);
        }

        StateHasChanged();
    }
    
        
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JsModule = new(await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/Notes/NoteEdit.razor.js"));
            
            _blazorPageReference = DotNetObjectReference.Create(this);
            await JsModule.Value.InvokeAsync<object>("setBlazorPageReference", _blazorPageReference);
        }
    }

    public async Task NewNoteClicked()
    {
        SetTimeFieldFromVideoTime();
        CurrentEntry.Type = EntryType.Note;
    }
    
    public async Task NewCommentClicked()
    {
        SetTimeFieldFromVideoTime();
        CurrentEntry.Type = EntryType.Quote;
    }
    public async Task NewSlideClicked()
    {
        SetTimeFieldFromVideoTime();
        CurrentEntry.Type = EntryType.Slide;
    }
    
    [JSInvokable]
    public async Task SaveFile()
    {
        var dataReference = await JsRuntime.InvokeAsync<IJSStreamReference>("fileDataStream"); 
        await using var dataReferenceStream = await dataReference.OpenReadStreamAsync(maxAllowedSize: 10_000_000);

        //store image before referencing it
        var imageName = $"{new IdGenerator(0).CreateId().ToString()}.png";
        var imageDirFullPath = $"{UserDefinitionsService.BookmarkImagesBaseFolderPath}/{CurrentNote.ImageFolderId}";

        if (!Directory.Exists(imageDirFullPath))
            Directory.CreateDirectory(imageDirFullPath);

        var createdFile = File.Create(Path.Combine(imageDirFullPath, imageName));
        await dataReferenceStream.CopyToAsync(createdFile);
        createdFile.Close();
        
        CurrentEntry.Image = $"{CurrentNote.ImageFolderId}/{imageName}";
    }

    [JSInvokable]
    public async Task PasteClipboardImage()
    {
        Console.WriteLine("reading blob");
        try
        {
            await JsModule.Value.InvokeAsync<byte[]>("getClipboardImageToPaste");
            // Console.WriteLine(blob.Length);
            //
            // //store image before referencing it
            // var imageName = $"{new IdGenerator(0).CreateId().ToString()}.png";
            // var imageDirFullPath = $"{UserDefinitionsService.BookmarkImagesBaseFolderPath}/{CurrentNote.ImageFolderId}";
            //
            // if (!Directory.Exists(imageDirFullPath))
            //     Directory.CreateDirectory(imageDirFullPath);
            //
            // File.WriteAllBytes(Path.Combine(imageDirFullPath, imageName), blob);
            // CurrentEntry.Image = $"{CurrentNote.ImageFolderId}/{imageName}";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task SetTimeFieldFromVideoTime()
    {
        var time = await JsModule.Value.InvokeAsync<double>("getCurrentVideoTime");
        
        //build time string
        var timeString = string.Empty;
        if (time > 3600)
            timeString = $"{ToIntStr(time / 3600)}:{ToIntStr((time % 3600) / 60)}:{ToIntStr((time % 60) / 1)}";
        else
            timeString = $"{ToIntStr((time % 3600) / 60)}:{ToIntStr((time % 60) / 1)}";

        CurrentEntry.Time = timeString;
    }
    
    private string ToIntStr(double time)
    {
        return Math.Floor(time).ToString("00");
    }

    public async Task SeekClicked(string time)
    {
        Console.WriteLine($"invoking seek {DateTime.UtcNow.ToString("HH:mm:sss")}");
        await JsModule.Value.InvokeVoidAsync("seekToTime", time);
    }

    private static string ImageToBase64DataSource(Entry note)
    {
        var path = $"{UserDefinitionsService.BookmarkImagesBaseFolderPath}/{note.Image}";
        var ext = Path.GetExtension(path);
        var data = Convert.ToBase64String(File.ReadAllBytes(path));
        return $"data:image/{ext};base64,{data}";
    }
    
    public async Task AddEntry()
    {
        CurrentNote.Notes.Add(CurrentEntry);
        ClearEntry();
        StateHasChanged();
    }
    
    public async Task ClearEntry()
    {
        CurrentEntry = new Entry();
    }

    public async ValueTask DisposeAsync()
    {
        _blazorPageReference.Dispose();
        if(JsModule.IsValueCreated)
        {
            await JsModule.Value.DisposeAsync();
        }
    }
}