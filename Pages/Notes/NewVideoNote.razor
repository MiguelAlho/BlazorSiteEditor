@page "/Notes/NewVideoNote"
@inject NavigationManager NavManager
@using MiguelAlho.BlazorSiteEditor.Models;

<h1>Add New Video Note</h1>

<PageTitle>Add new video note</PageTitle>

<MudTimeline TimelinePosition="TimelinePosition.Start">
    <MudTimelineItem TimelineAlign="@TimelineAlign.End" >
        <ItemContent>
            Start by adding the video link
            <MudTextField T="string"  @bind-Value="VideoLink" 
                        Label="Video Link" Required="true" 
                        RequiredError="Title is required!"
                        OnChange="ValidateVideoUrl"
                        />
            <MudButton OnClick="TryLoadMetadata">
                Load Video Metadata
            </MudButton>
            <MudTextField T="string"  @bind-Value="NewNote.Title" Label="Title" 
                Required="true" RequiredError="Title is required!"/>
                
            <MudTextField T="string"  @bind-Value="NewNote.Url" Label="Page Url" 
                Required="true" RequiredError="Url is required!"/>
        </ItemContent>
    </MudTimelineItem>

    <MudTimelineItem TimelineAlign="@TimelineAlign.End">
        <ItemContent>
            <h3>Video meta</h3>

            <h4>Talk Author</h4>
            <MudTextField T="string"  @bind-Value="NewNote.Video.Author.Name" Label="Talk Author Name" />
            <MudTextField T="string"  @bind-Value="NewNote.Video.Author.Twitter" Label="Twitter" />
            <MudTextField T="string"  @bind-Value="NewNote.Video.Author.LinkedIn" Label="Linkedin" />            

            <h4>Talk Context</h4>
            <MudTextField T="string"  @bind-Value="NewNote.Video.Context.Name" Label="Event Name" />
            <MudTextField T="string"  @bind-Value="NewNote.Video.Context.Link" Label="Event Link" />
        </ItemContent>
    </MudTimelineItem>

    <MudTimelineItem TimelineAlign="@TimelineAlign.End">
        <ItemContent>
            <h3>Data:</h3>

            <MudButton OnClick="OnSave">
                Save
            </MudButton>
        </ItemContent>
    </MudTimelineItem>


</MudTimeline>
@code
{
    public string VideoLink {get; set;} = string.Empty;
    public Note NewNote {get; set;} = new();

    protected override void OnInitialized()
    {

    }
    
    public async Task TryLoadMetadata()
    {
        var url = new System.Uri(VideoLink);
        var queryParams = System.Web.HttpUtility.ParseQueryString(url.Query);
        var id = queryParams["v"];

        using var client = new HttpClient();
        var content = await client.GetStringAsync(url);

        Regex regex = new Regex(@"""title"":{""simpleText"":""([^""]+)""}");
        Match match = regex.Match(content);
        if (match.Success)
        {
            NewNote.Title = match.Groups[1].Value;
        }

        NewNote.Url = $"/bookmark-{NewNote.Title.Replace(" ","-")}";
        NewNote.Video.Id = id;
        NewNote.Video.Link = $"https://www.youtube.com/embed/{id}";

        StateHasChanged();
    }

    public void OnSave()
    {
        try{
            var deserializer = new SerializerBuilder()
                .WithNamingConvention(CamelCaseNamingConvention.Instance)  // see height_in_inches in sample yml 
                .Build();
            var yaml = deserializer.Serialize(NewNote);
            Console.WriteLine(yaml);

            var notesDir = UserDefinitionsService.BookmarksFolderPath;
            var fileName = $"{NewNote.Url.Replace("/","")}.md";
            var filePath = Path.Combine(notesDir, fileName);

            //System.IO.File.Create(filePath);
            System.IO.File.AppendAllLines(filePath, new[]{"---"});
            System.IO.File.AppendAllText(filePath, yaml);
            System.IO.File.AppendAllLines(filePath, new[]{"---"});

            NavManager.NavigateTo($"/Notes/Edit/{fileName}");
        }catch(Exception ex)
        {
            Console.WriteLine(ex);
            Console.WriteLine(ex.InnerException);
        }

        

    }
}